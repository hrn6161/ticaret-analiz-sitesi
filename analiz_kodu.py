import requests
from bs4 import BeautifulSoup
import time
import random
import re
from openpyxl import Workbook
from openpyxl.styles import Font
import sys
import logging
import os
from datetime import datetime
import cloudscraper
import urllib.parse

print("üöÄ TAM ≈ûƒ∞RKET ƒ∞Sƒ∞MLƒ∞ GELƒ∞≈ûMƒ∞≈û Tƒ∞CARET ANALƒ∞Z Sƒ∞STEMƒ∞")

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
        logging.StreamHandler()
    ]
)

class Config:
    def __init__(self):
        self.MAX_RESULTS = 10
        self.REQUEST_TIMEOUT = 30
        self.RETRY_ATTEMPTS = 2
        self.MAX_GTIP_CHECK = 3
        self.USER_AGENTS = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]

class AdvancedCrawler:
    def __init__(self, config):
        self.config = config
        self.scraper = cloudscraper.create_scraper()
    
    def advanced_crawl(self, url, target_country):
        """Geli≈ümi≈ü crawl"""
        print(f"   üåê Crawl: {url[:60]}...")
        
        try:
            headers = {
                'User-Agent': random.choice(self.config.USER_AGENTS),
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            }
            
            response = self.scraper.get(url, headers=headers, timeout=20)
            
            if response.status_code == 200:
                return self._parse_advanced_content(response.text, target_country, response.status_code)
            else:
                print(f"   ‚ùå Sayfa hatasƒ± {response.status_code}: {url}")
                return {'country_found': False, 'gtip_codes': [], 'content_preview': '', 'status_code': response.status_code}
                
        except Exception as e:
            print(f"   ‚ùå Crawl hatasƒ±: {e}")
            return {'country_found': False, 'gtip_codes': [], 'content_preview': '', 'status_code': 'ERROR'}
    
    def _parse_advanced_content(self, html, target_country, status_code):
        """ƒ∞√ßerik analizi"""
        try:
            soup = BeautifulSoup(html, 'html.parser')
            text_content = soup.get_text()
            text_lower = text_content.lower()
            
            country_found = self._check_country_advanced(text_lower, target_country)
            gtip_codes = self.extract_advanced_gtip_codes(text_content)
            
            print(f"   üîç Sayfa analizi: √úlke={country_found}, GTIP={gtip_codes[:3]}")
            
            return {
                'country_found': country_found,
                'gtip_codes': gtip_codes,
                'content_preview': text_content[:200] + "..." if len(text_content) > 200 else text_content,
                'status_code': status_code
            }
        except Exception as e:
            print(f"   ‚ùå Parse hatasƒ±: {e}")
            return {'country_found': False, 'gtip_codes': [], 'content_preview': '', 'status_code': 'PARSE_ERROR'}
    
    def _check_country_advanced(self, text_lower, target_country):
        """√úlke kontrol√º"""
        country_variations = [
            target_country.lower(),
            target_country.upper(), 
            target_country.title(),
            'russia', 'rusya', 'rusian', 'rus'
        ]
        
        trade_terms = ['export', 'import', 'country', 'origin', 'destination', 'trade', 'supplier', 'buyer']
        
        for country_var in country_variations:
            if country_var in text_lower:
                for term in trade_terms:
                    if f"{term} {country_var}" in text_lower or f"{country_var} {term}" in text_lower:
                        return True
                return True
        
        return False
    
    def extract_advanced_gtip_codes(self, text):
        """GTIP kod √ßƒ±karma"""
        patterns = [
            r'\b\d{4}\.?\d{0,4}\b',
            r'\b\d{6}\b',
            r'\bHS\s?CODE\s?:?\s?(\d{4,8})\b',
            r'\bGTIP\s?:?\s?(\d{4,8})\b',
            r'\bH.S\.\s?CODE\s?:?\s?(\d{4,8})\b',
        ]
        
        all_codes = set()
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                
                code = re.sub(r'[^\d]', '', match)
                if len(code) >= 4:
                    all_codes.add(code[:4])
        
        return list(all_codes)
    
    def analyze_snippet_deep(self, snippet_text, target_country, url=""):
        """Snippet analizi"""
        domain = self._extract_domain(url)
        combined_text = f"{snippet_text} {domain}".lower()
        
        country_found = self._check_country_advanced(combined_text, target_country)
        gtip_codes = self.extract_advanced_gtip_codes(snippet_text)
        
        return {
            'country_found': country_found,
            'gtip_codes': gtip_codes
        }
    
    def _extract_domain(self, url):
        """URL'den domain √ßƒ±kar"""
        try:
            from urllib.parse import urlparse
            return urlparse(url).netloc
        except:
            return ""

class AdvancedDuckDuckGoSearcher:
    def __init__(self, config):
        self.config = config
        self.scraper = cloudscraper.create_scraper()
        print("   ü¶Ü Geli≈ümi≈ü DuckDuckGo arama motoru hazƒ±r!")
    
    def search_with_retry(self, query, max_results=10):
        """Geli≈ümi≈ü DuckDuckGo arama - Retry mekanizmalƒ±"""
        for attempt in range(2):
            try:
                print(f"   üîç DuckDuckGo Search (Deneme {attempt+1}): {query}")
                
                wait_time = random.uniform(2, 4)
                time.sleep(wait_time)
                
                if attempt == 0:
                    results = self._search_method1(query, max_results)
                else:
                    results = self._search_method2(query, max_results)
                
                if results:
                    print(f"   ‚úÖ DuckDuckGo {len(results)} sonu√ß buldu")
                    return results
                else:
                    print(f"   ‚ö†Ô∏è DuckDuckGo sonu√ß bulamadƒ± (Deneme {attempt+1})")
                    
            except Exception as e:
                print(f"   ‚ùå DuckDuckGo hatasƒ± (Deneme {attempt+1}): {e}")
                continue
        
        return []
    
    def _search_method1(self, query, max_results):
        """ƒ∞lk y√∂ntem: HTML endpoint"""
        try:
            url = "https://html.duckduckgo.com/html/"
            data = {
                'q': query,
                'b': '',
                'kl': 'us-en'
            }
            
            headers = {
                'User-Agent': random.choice(self.config.USER_AGENTS),
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            response = self.scraper.post(url, data=data, headers=headers, timeout=15)
            return self._parse_html_results(response.text, max_results)
            
        except Exception as e:
            print(f"   ‚ùå Method1 hatasƒ±: {e}")
            return []
    
    def _search_method2(self, query, max_results):
        """ƒ∞kinci y√∂ntem: Lite endpoint"""
        try:
            encoded_query = urllib.parse.quote_plus(query)
            url = f"https://lite.duckduckgo.com/lite/?q={encoded_query}"
            
            headers = {
                'User-Agent': random.choice(self.config.USER_AGENTS),
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            }
            
            response = self.scraper.get(url, headers=headers, timeout=15)
            return self._parse_lite_results(response.text, max_results)
            
        except Exception as e:
            print(f"   ‚ùå Method2 hatasƒ±: {e}")
            return []
    
    def _parse_html_results(self, html, max_results):
        """HTML sonu√ßlarƒ±nƒ± parse et"""
        soup = BeautifulSoup(html, 'html.parser')
        results = []
        
        # Birden fazla olasƒ± selector
        selectors = [
            'div.result',
            'div.web-result',
            'div.result__body',
            'div.links_main'
        ]
        
        for selector in selectors:
            results_elements = soup.find_all('div', class_=selector)[:max_results]
            if results_elements:
                break
        
        for element in results_elements:
            try:
                title_elem = (element.find('a', class_='result__a') or 
                             element.find('a', class_='web-result__link') or
                             element.find('h2') or
                             element.find('a'))
                
                if not title_elem:
                    continue
                    
                title = title_elem.get_text(strip=True)
                url = title_elem.get('href')
                
                # DuckDuckGo redirect linklerini √ß√∂z
                if url and ('//duckduckgo.com/l/' in url or url.startswith('/l/')):
                    url = self._resolve_redirect(url)
                    if not url:
                        continue
                
                snippet_elem = (element.find('a', class_='result__snippet') or
                               element.find('div', class_='result__snippet') or
                               element.find('div', class_='web-result__description') or
                               element.find('td', class_='result-snippet'))
                
                snippet = snippet_elem.get_text(strip=True) if snippet_elem else ""
                
                if url and url.startswith('//'):
                    url = 'https:' + url
                
                if not url or not url.startswith('http'):
                    continue
                
                results.append({
                    'title': title,
                    'url': url,
                    'snippet': snippet,
                    'full_text': f"{title} {snippet}",
                    'domain': self._extract_domain(url),
                    'search_engine': 'duckduckgo'
                })
                
                print(f"      üìÑ Bulundu: {title[:50]}...")
                
            except Exception as e:
                print(f"      ‚ùå Sonu√ß parse hatasƒ±: {e}")
                continue
        
        return results
    
    def _parse_lite_results(self, html, max_results):
        """Lite sonu√ßlarƒ±nƒ± parse et"""
        soup = BeautifulSoup(html, 'html.parser')
        results = []
        
        tables = soup.find_all('table')
        
        for table in tables[:max_results]:
            try:
                links = table.find_all('a', href=True)
                for link in links:
                    title = link.get_text(strip=True)
                    url = link.get('href')
                    
                    if url and ('duckduckgo.com' not in url) and url.startswith('http'):
                        snippet = ""
                        next_row = table.find_next_sibling('tr')
                        if next_row:
                            snippet_cell = next_row.find('td')
                            if snippet_cell:
                                snippet = snippet_cell.get_text(strip=True)
                        
                        results.append({
                            'title': title,
                            'url': url,
                            'snippet': snippet,
                            'full_text': f"{title} {snippet}",
                            'domain': self._extract_domain(url),
                            'search_engine': 'duckduckgo'
                        })
                        
                        print(f"      üìÑ Lite: {title[:50]}...")
                        break
                        
            except Exception as e:
                continue
        
        return results
    
    def _resolve_redirect(self, redirect_url):
        """Redirect URL'lerini √ß√∂z"""
        try:
            if redirect_url.startswith('/l/'):
                redirect_url = 'https://duckduckgo.com' + redirect_url
            
            headers = {
                'User-Agent': random.choice(self.config.USER_AGENTS),
            }
            
            response = self.scraper.get(redirect_url, headers=headers, timeout=8, allow_redirects=True)
            return response.url
            
        except Exception as e:
            print(f"      ‚ö†Ô∏è Redirect √ß√∂zme hatasƒ±: {e}")
            return None
    
    def _extract_domain(self, url):
        """URL'den domain √ßƒ±kar"""
        try:
            from urllib.parse import urlparse
            return urlparse(url).netloc
        except:
            return ""

class ExactMatchQueryGenerator:
    """TAM ≈ûƒ∞RKET ƒ∞Sƒ∞MLƒ∞ sorgu generator"""
    
    @staticmethod
    def generate_queries(company, country):
        """TAM ≈ûƒ∞RKET ƒ∞SMƒ∞ ile optimize edilmi≈ü sorgular"""
        
        queries = []
        
        # TAM ≈ûƒ∞RKET ƒ∞SMƒ∞ ile temel sorgular
        base_queries = [
            f'"{company}" "{country}"',  # Tƒ±rnak i√ßinde tam e≈üle≈üme
            f'"{company}" {country} export',
            f'"{company}" {country} import',
            f'"{company}" {country} trade',
            f'"{company}" Russia',  # Rusya i√ßin √∂zel
            f'"{company}" export Russia',
            f'"{company}" import Russia',
            f"{company} {country} export",  # Tƒ±rnaksƒ±z da deneyelim
            f"{company} {country} import",
            f"{company} {country} trade",
        ]
        
        # Ticaret verisi sorgularƒ± - TAM ƒ∞Sƒ∞M
        trade_queries = [
            f'"{company}" customs data',
            f'"{company}" trade data',
            f'"{company}" shipping',
            f'"{company}" supplier',
            f'"{company}" buyer',
            f'"{company}" HS code',
            f'"{company}" GTIP',
        ]
        
        # Platform √∂zel sorgularƒ± - TAM ƒ∞Sƒ∞M
        platform_queries = [
            f'"{company}" site:trademo.com',
            f'"{company}" site:volza.com', 
            f'"{company}" site:eximpedia.app',
            f'"{company}" site:importyet.com',
            f'"{company}" site:exportgenius.in',
            f'"{company}" site:seair.co.in',
        ]
        
        # T√ºm sorgularƒ± birle≈ütir - TAM ƒ∞Sƒ∞M √∂ncelikli
        queries.extend(base_queries)
        queries.extend(trade_queries)
        queries.extend(platform_queries)
        
        # Ek olarak tƒ±rnaksƒ±z sorgular da ekleyelim
        additional_queries = [
            f"{company} {country} business",
            f"{company} Russia business",
            f"{company} international trade",
            f"{company} overseas",
        ]
        
        queries.extend(additional_queries)
        
        print(f"   üîç Olu≈üturulan TAM ƒ∞Sƒ∞MLƒ∞ sorgular: {queries[:5]}...")  # ƒ∞lk 5'ini g√∂ster
        return queries

class QuickEURLexChecker:
    def __init__(self, config):
        self.config = config
        self.sanction_cache = {}
    
    def quick_check_gtip(self, gtip_codes):
        """Hƒ±zlƒ± GTIP kontrol√º"""
        if not gtip_codes:
            return []
            
        sanctioned_codes = []
        checked_codes = gtip_codes[:self.config.MAX_GTIP_CHECK]
        
        print(f"   üîç EUR-Lex kontrol√º: {checked_codes}")
        
        for gtip_code in checked_codes:
            if gtip_code in self.sanction_cache:
                if self.sanction_cache[gtip_code]:
                    sanctioned_codes.append(gtip_code)
                continue
                
            try:
                wait_time = random.uniform(1, 2)
                time.sleep(wait_time)
                
                url = "https://eur-lex.europa.eu/search.html"
                params = {
                    'text': f'"{gtip_code}" sanction prohibited',
                    'type': 'advanced',
                    'lang': 'en'
                }
                
                headers = {
                    'User-Agent': random.choice(self.config.USER_AGENTS),
                }
                
                response = requests.get(url, params=params, headers=headers, timeout=10)
                
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    content = soup.get_text().lower()
                    
                    sanction_terms = ['prohibited', 'banned', 'sanction', 'restricted', 'embargo']
                    found_sanction = any(term in content for term in sanction_terms)
                    
                    if found_sanction:
                        sanctioned_codes.append(gtip_code)
                        self.sanction_cache[gtip_code] = True
                        print(f"   ‚õî Yaptƒ±rƒ±mlƒ± kod: {gtip_code}")
                    else:
                        self.sanction_cache[gtip_code] = False
                
            except Exception as e:
                print(f"   ‚ùå EUR-Lex kontrol hatasƒ±: {e}")
                continue
        
        return sanctioned_codes

class EnhancedTradeAnalyzer:
    def __init__(self, config):
        self.config = config
        self.searcher = AdvancedDuckDuckGoSearcher(config)
        self.crawler = AdvancedCrawler(config)
        self.eur_lex_checker = QuickEURLexChecker(config)
        self.query_generator = ExactMatchQueryGenerator()
    
    def enhanced_analyze(self, company, country):
        """Geli≈ümi≈ü analiz - TAM ≈ûƒ∞RKET ƒ∞SMƒ∞ ile"""
        print(f"ü§ñ TAM ≈ûƒ∞RKET ƒ∞Sƒ∞MLƒ∞ ANALƒ∞Z BA≈ûLATILIYOR: '{company}' ‚Üî {country}")
        
        # TAM ≈ûƒ∞RKET ƒ∞Sƒ∞MLƒ∞ sorgular olu≈ütur
        search_queries = self.query_generator.generate_queries(company, country)
        
        all_results = []
        found_urls = set()
        
        for i, query in enumerate(search_queries, 1):
            try:
                print(f"\nüîç Sorgu {i}/{len(search_queries)}: {query}")
                
                if i > 1:
                    wait_time = random.uniform(3, 6)
                    print(f"   ‚è≥ Sorgular arasƒ± {wait_time:.1f}s bekleme...")
                    time.sleep(wait_time)
                
                search_results = self.searcher.search_with_retry(query, self.config.MAX_RESULTS)
                
                if not search_results:
                    print(f"   ‚ö†Ô∏è Sonu√ß bulunamadƒ±")
                    continue
                
                for j, result in enumerate(search_results, 1):
                    if result['url'] in found_urls:
                        continue
                    
                    found_urls.add(result['url'])
                    
                    print(f"   üìÑ Sonu√ß {j}: {result['title'][:40]}...")
                    
                    # ≈ûirket ismi kontrol√º - TAM E≈ûLE≈ûME √∂nemli
                    if self._check_company_match(result['full_text'], company):
                        print(f"   üéØ TAM ≈ûƒ∞RKET E≈ûLE≈ûMESƒ∞: {company}")
                    
                    if j > 1:
                        time.sleep(random.uniform(1, 3))
                    
                    crawl_result = self.crawler.advanced_crawl(result['url'], country)
                    
                    # Snippet analizi ile destekle
                    if not crawl_result['country_found'] and not crawl_result['gtip_codes']:
                        snippet_analysis = self.crawler.analyze_snippet_deep(result['full_text'], country, result['url'])
                        if snippet_analysis['country_found'] or snippet_analysis['gtip_codes']:
                            crawl_result['country_found'] = snippet_analysis['country_found']
                            crawl_result['gtip_codes'] = snippet_analysis['gtip_codes']
                    
                    sanctioned_gtips = []
                    if crawl_result['gtip_codes']:
                        sanctioned_gtips = self.eur_lex_checker.quick_check_gtip(crawl_result['gtip_codes'])
                    
                    confidence = self._calculate_confidence(crawl_result, sanctioned_gtips, result['domain'], result['full_text'], company)
                    
                    analysis = self.create_enhanced_analysis_result(
                        company, country, result, crawl_result, sanctioned_gtips, confidence
                    )
                    
                    all_results.append(analysis)
                    
                    # Yeterli sonu√ß bulduysak erken √ßƒ±k
                    if len(all_results) >= 8:
                        print("   üéØ Yeterli sonu√ß bulundu, analiz tamamlanƒ±yor...")
                        return all_results
                
            except Exception as e:
                print(f"   ‚ùå Sorgu hatasƒ±: {e}")
                continue
        
        return all_results
    
    def _check_company_match(self, text, company):
        """≈ûirket ismi tam e≈üle≈üme kontrol√º"""
        text_lower = text.lower()
        company_lower = company.lower()
        
        # Tam ≈üirket ismi ge√ßiyor mu?
        if company_lower in text_lower:
            return True
        
        # ≈ûirket isminin √∂nemli kƒ±sƒ±mlarƒ±nƒ± kontrol et
        important_words = [word for word in company_lower.split() if len(word) > 3]
        if len(important_words) >= 2:
            match_count = sum(1 for word in important_words if word in text_lower)
            if match_count >= len(important_words) - 1:  # En az n-1 kelime e≈üle≈ümeli
                return True
        
        return False
    
    def _calculate_confidence(self, crawl_result, sanctioned_gtips, domain, full_text, company):
        """G√ºven seviyesi hesapla"""
        confidence = 0
        
        # TAM ≈ûƒ∞RKET E≈ûLE≈ûMESƒ∞ - EN √ñNEMLƒ∞
        if self._check_company_match(full_text, company):
            confidence += 40
        
        trusted_domains = ['trademo.com', 'eximpedia.app', 'volza.com', 'importyet.com', 'emis.com']
        if any(trusted in domain for trusted in trusted_domains):
            confidence += 30
        
        if crawl_result['gtip_codes']:
            confidence += 20
        
        if crawl_result['country_found']:
            confidence += 20
        
        if sanctioned_gtips:
            confidence += 10
        
        return min(confidence, 100)
    
    def create_enhanced_analysis_result(self, company, country, search_result, crawl_result, sanctioned_gtips, confidence):
        """Geli≈ümi≈ü analiz sonucu"""
        
        reasons = []
        if self._check_company_match(search_result['full_text'], company):
            reasons.append("TAM ≈ûƒ∞RKET E≈ûLE≈ûMESƒ∞")
        if crawl_result['country_found']:
            reasons.append("√úlke baƒülantƒ±sƒ± tespit edildi")
        if crawl_result['gtip_codes']:
            reasons.append(f"GTIP kodlarƒ± bulundu: {', '.join(crawl_result['gtip_codes'][:3])}")
        if sanctioned_gtips:
            reasons.append(f"Yaptƒ±rƒ±mlƒ± GTIP kodlarƒ±: {', '.join(sanctioned_gtips)}")
        if any(trusted in search_result['domain'] for trusted in ['trademo.com', 'volza.com', 'eximpedia.app']):
            reasons.append("G√ºvenilir ticaret verisi kaynaƒüƒ±")
        
        if sanctioned_gtips:
            status = "YAPTIRIMLI_Y√úKSEK_RISK"
            explanation = f"‚õî Y√úKSEK Rƒ∞SK: {company} ≈üirketi {country} ile yaptƒ±rƒ±mlƒ± √ºr√ºn ticareti yapƒ±yor"
            ai_tavsiye = f"‚õî ACƒ∞L DURUM! Bu √ºr√ºnlerin {country.upper()} ihracƒ± YASAKTIR: {', '.join(sanctioned_gtips)}"
            risk_level = "Y√úKSEK"
        elif crawl_result['country_found'] and crawl_result['gtip_codes']:
            status = "RISK_VAR"
            explanation = f"üü° Rƒ∞SK VAR: {company} ≈üirketi {country} ile ticaret baƒülantƒ±sƒ± bulundu"
            ai_tavsiye = f"Ticaret baƒülantƒ±sƒ± doƒürulandƒ±. GTIP kodlarƒ±: {', '.join(crawl_result['gtip_codes'][:3])}"
            risk_level = "ORTA"
        elif crawl_result['country_found']:
            status = "ƒ∞Lƒ∞≈ûKƒ∞_VAR"
            explanation = f"üü¢ ƒ∞Lƒ∞≈ûKƒ∞ VAR: {company} ≈üirketi {country} ile baƒülantƒ±lƒ±"
            ai_tavsiye = "Ticaret baƒülantƒ±sƒ± bulundu ancak GTIP kodu tespit edilemedi"
            risk_level = "D√ú≈û√úK"
        else:
            status = "TEMIZ"
            explanation = f"‚úÖ TEMƒ∞Z: {company} ≈üirketinin {country} ile ticaret baƒülantƒ±sƒ± bulunamadƒ±"
            ai_tavsiye = "Ticaret baƒülantƒ±sƒ± bulunamadƒ±"
            risk_level = "YOK"
        
        return {
            '≈ûƒ∞RKET': company,
            '√úLKE': country,
            'DURUM': status,
            'AI_A√áIKLAMA': explanation,
            'AI_TAVSIYE': ai_tavsiye,
            'YAPTIRIM_RISKI': risk_level,
            'TESPIT_EDILEN_GTIPLER': ', '.join(crawl_result['gtip_codes'][:5]),
            'YAPTIRIMLI_GTIPLER': ', '.join(sanctioned_gtips),
            'ULKE_BAGLANTISI': 'EVET' if crawl_result['country_found'] else 'HAYIR',
            'BA≈ûLIK': search_result['title'],
            'URL': search_result['url'],
            '√ñZET': search_result['snippet'],
            'STATUS_CODE': crawl_result.get('status_code', 'N/A'),
            'KAYNAK_URL': search_result['url'],
            'G√úVEN_SEVƒ∞YESƒ∞': f"%{confidence}",
            'NEDENLER': ' | '.join(reasons) if reasons else 'Belirsiz',
            'ARAMA_MOTORU': search_result.get('search_engine', 'duckduckgo')
        }

def create_detailed_excel_report(results, company, country):
    """Detaylƒ± Excel raporu"""
    try:
        filename = f"{company.replace(' ', '_')}_{country}_ticaret_analiz.xlsx"
        
        wb = Workbook()
        ws1 = wb.active
        ws1.title = "Analiz Sonu√ßlarƒ±"
        
        headers = [
            '≈ûƒ∞RKET', '√úLKE', 'DURUM', 'YAPTIRIM_RISKI', 'ULKE_BAGLANTISI',
            'TESPIT_EDILEN_GTIPLER', 'YAPTIRIMLI_GTIPLER', 'G√úVEN_SEVƒ∞YESƒ∞', 'NEDENLER',
            'AI_A√áIKLAMA', 'AI_TAVSIYE', 'BA≈ûLIK', 'URL', '√ñZET', 'ARAMA_MOTORU'
        ]
        
        for col, header in enumerate(headers, 1):
            cell = ws1.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
        
        for row, result in enumerate(results, 2):
            ws1.cell(row=row, column=1, value=str(result.get('≈ûƒ∞RKET', '')))
            ws1.cell(row=row, column=2, value=str(result.get('√úLKE', '')))
            ws1.cell(row=row, column=3, value=str(result.get('DURUM', '')))
            ws1.cell(row=row, column=4, value=str(result.get('YAPTIRIM_RISKI', '')))
            ws1.cell(row=row, column=5, value=str(result.get('ULKE_BAGLANTISI', '')))
            ws1.cell(row=row, column=6, value=str(result.get('TESPIT_EDILEN_GTIPLER', '')))
            ws1.cell(row=row, column=7, value=str(result.get('YAPTIRIMLI_GTIPLER', '')))
            ws1.cell(row=row, column=8, value=str(result.get('G√úVEN_SEVƒ∞YESƒ∞', '')))
            ws1.cell(row=row, column=9, value=str(result.get('NEDENLER', '')))
            ws1.cell(row=row, column=10, value=str(result.get('AI_A√áIKLAMA', '')))
            ws1.cell(row=row, column=11, value=str(result.get('AI_TAVSIYE', '')))
            ws1.cell(row=row, column=12, value=str(result.get('BA≈ûLIK', '')))
            ws1.cell(row=row, column=13, value=str(result.get('URL', '')))
            ws1.cell(row=row, column=14, value=str(result.get('√ñZET', '')))
            ws1.cell(row=row, column=15, value=str(result.get('ARAMA_MOTORU', '')))
        
        for column in ws1.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws1.column_dimensions[column_letter].width = adjusted_width
        
        wb.save(filename)
        print(f"‚úÖ Excel raporu olu≈üturuldu: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå Excel rapor hatasƒ±: {e}")
        return None

def display_results(results, company, country):
    """Sonu√ßlarƒ± g√∂ster"""
    print(f"\n{'='*80}")
    print(f"üìä TAM ≈ûƒ∞RKET ƒ∞Sƒ∞MLƒ∞ ANALƒ∞Z SONU√áLARI: '{company}' ‚Üî {country}")
    print(f"{'='*80}")
    
    if not results:
        print("‚ùå Analiz sonucu bulunamadƒ±!")
        return
    
    total_results = len(results)
    high_risk_count = len([r for r in results if r.get('YAPTIRIM_RISKI') == 'Y√úKSEK'])
    medium_risk_count = len([r for r in results if r.get('YAPTIRIM_RISKI') == 'ORTA'])
    country_connection_count = len([r for r in results if r.get('ULKE_BAGLANTISI') == 'EVET'])
    exact_match_count = len([r for r in results if 'TAM ≈ûƒ∞RKET E≈ûLE≈ûMESƒ∞' in r.get('NEDENLER', '')])
    
    print(f"\nüìà √ñZET:")
    print(f"   ‚Ä¢ Toplam Sonu√ß: {total_results}")
    print(f"   ‚Ä¢ TAM ≈ûƒ∞RKET E≈ûLE≈ûMESƒ∞: {exact_match_count}")
    print(f"   ‚Ä¢ √úlke Baƒülantƒ±sƒ±: {country_connection_count}")
    print(f"   ‚Ä¢ Y√úKSEK Yaptƒ±rƒ±m Riski: {high_risk_count}")
    print(f"   ‚Ä¢ ORTA Risk: {medium_risk_count}")
    
    if high_risk_count > 0:
        print(f"\n‚ö†Ô∏è  KRƒ∞Tƒ∞K YAPTIRIM UYARISI:")
        for result in results:
            if result.get('YAPTIRIM_RISKI') == 'Y√úKSEK':
                print(f"   üî¥ {result.get('BA≈ûLIK', '')[:60]}...")
                print(f"      Yasaklƒ± GTIP: {result.get('YAPTIRIMLI_GTIPLER', '')}")
    
    for i, result in enumerate(results, 1):
        print(f"\nüîç SONU√á {i}:")
        print(f"   üìù Ba≈ülƒ±k: {result.get('BA≈ûLIK', 'N/A')}")
        print(f"   üåê URL: {result.get('URL', 'N/A')}")
        print(f"   üéØ Durum: {result.get('DURUM', 'N/A')}")
        print(f"   ‚ö†Ô∏è  Yaptƒ±rƒ±m Riski: {result.get('YAPTIRIM_RISKI', 'N/A')}")
        print(f"   üîó √úlke Baƒülantƒ±sƒ±: {result.get('ULKE_BAGLANTISI', 'N/A')}")
        print(f"   üîç GTIP Kodlarƒ±: {result.get('TESPIT_EDILEN_GTIPLER', 'Yok')}")
        if result.get('YAPTIRIMLI_GTIPLER'):
            print(f"   üö´ Yasaklƒ± GTIP: {result.get('YAPTIRIMLI_GTIPLER', '')}")
        print(f"   üìä G√ºven Seviyesi: {result.get('G√úVEN_SEVƒ∞YESƒ∞', 'N/A')}")
        print(f"   üîç Arama Motoru: {result.get('ARAMA_MOTORU', 'N/A')}")
        print(f"   üìã Nedenler: {result.get('NEDENLER', 'N/A')}")
        print(f"   üí° A√ßƒ±klama: {result.get('AI_A√áIKLAMA', 'N/A')}")
        print(f"   üí≠ Tavsiye: {result.get('AI_TAVSIYE', 'N/A')}")
        print(f"   {'‚îÄ'*60}")

def main():
    print("üìä TAM ≈ûƒ∞RKET ƒ∞Sƒ∞MLƒ∞ Tƒ∞CARET ANALƒ∞Z Sƒ∞STEMƒ∞")
    print("üéØ HEDEF: Tam ≈üirket ismi ile kesin e≈üle≈ümeli analiz")
    print("üí° AVANTAJ: Sadece ilgili sonu√ßlar, y√ºksek doƒüruluk")
    print("ü¶Ü Arama Motoru: DuckDuckGo\n")
    
    config = Config()
    analyzer = EnhancedTradeAnalyzer(config)
    
    company = input("≈ûirket adƒ±nƒ± girin (TAM ƒ∞Sƒ∞M): ").strip()
    country = input("√úlke adƒ±nƒ± girin: ").strip()
    
    if not company or not country:
        print("‚ùå ≈ûirket ve √ºlke bilgisi gereklidir!")
        return
    
    print(f"\nüöÄ TAM ≈ûƒ∞RKET ƒ∞Sƒ∞MLƒ∞ ANALƒ∞Z BA≈ûLATILIYOR: '{company}' ‚Üî {country}")
    print("‚è≥ DuckDuckGo ile TAM ƒ∞Sƒ∞M aramasƒ± yapƒ±lƒ±yor...")
    print("   Tƒ±rnak i√ßinde sorgular olu≈üturuluyor...")
    print("   Tam e≈üle≈üme kontrol√º yapƒ±lƒ±yor...")
    print("   Sayfalar analiz ediliyor...\n")
    
    start_time = time.time()
    results = analyzer.enhanced_analyze(company, country)
    execution_time = time.time() - start_time
    
    if results:
        display_results(results, company, country)
        
        filename = create_detailed_excel_report(results, company, country)
        
        if filename:
            print(f"\n‚úÖ Excel raporu olu≈üturuldu: {filename}")
            print(f"‚è±Ô∏è  Toplam √ßalƒ±≈üma s√ºresi: {execution_time:.2f} saniye")
            
            try:
                open_excel = input("\nüìÇ Excel dosyasƒ±nƒ± a√ßmak ister misiniz? (e/h): ").strip().lower()
                if open_excel == 'e':
                    if os.name == 'nt':
                        os.system(f'start excel "{filename}"')
                    elif os.name == 'posix':
                        os.system(f'open "{filename}"' if sys.platform == 'darwin' else f'xdg-open "{filename}"')
                    print("üìÇ Excel dosyasƒ± a√ßƒ±lƒ±yor...")
            except Exception as e:
                print(f"‚ö†Ô∏è  Dosya otomatik a√ßƒ±lamadƒ±: {e}")
                print(f"üìÅ Manuel a√ßƒ±n: {filename}")
        else:
            print("‚ùå Excel raporu olu≈üturulamadƒ±!")
    else:
        print("‚ùå Analiz sonucu bulunamadƒ±!")

if __name__ == "__main__":
    main()
