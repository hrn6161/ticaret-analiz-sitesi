from flask import Flask, request, jsonify, render_template, send_file
import requests
from bs4 import BeautifulSoup
import time
import random
import re
from openpyxl import Workbook
from openpyxl.styles import Font
import sys
import logging
import os
from datetime import datetime

app = Flask(__name__)

print("ðŸš€ GELÄ°ÅžMÄ°Åž YAPAY ZEKA YAPTIRIM ANALÄ°Z SÄ°STEMÄ° BAÅžLATILIYOR...")

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class Config:
    def __init__(self):
        self.MAX_RESULTS = 3  # AzaltÄ±ldÄ±: 5'ten 3'e
        self.REQUEST_TIMEOUT = 15  # AzaltÄ±ldÄ±: 20'den 15'e
        self.RETRY_ATTEMPTS = 2  # AzaltÄ±ldÄ±: 3'ten 2'ye
        self.DELAY_BETWEEN_REQUESTS = 2.0  # AzaltÄ±ldÄ±: 3.0'dan 2.0'a
        self.DELAY_BETWEEN_SEARCHES = 2.0  # AzaltÄ±ldÄ±: 5.0'dan 2.0'a
        self.EU_SANCTIONS_URL = "https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX%3A02014R0833-20250720"
        self.USER_AGENTS = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        ]

# EUSanctionsAPI, RealTimeSanctionAnalyzer, SearchEngineManager, AdvancedAIAnalyzer, AdvancedTradeAnalyzer sÄ±nÄ±flarÄ± aynÄ± kalacak
# (Ã–nceki dosyadan kopyala, burada uzunluk nedeniyle kÄ±saltÄ±yorum)

class EUSanctionsAPI:
    # ... (Ã–nceki dosyadan aynen al)
    pass

class RealTimeSanctionAnalyzer:
    # ... (Ã–nceki dosyadan aynen al)
    pass

class SearchEngineManager:
    # ... (Ã–nceki dosyadan aynen al)
    pass

class AdvancedAIAnalyzer:
    # ... (Ã–nceki dosyadan aynen al)
    pass

class AdvancedTradeAnalyzer:
    # ... (Ã–nceki dosyadan aynen al)
    pass

def create_advanced_excel_report(results, company, country):
    # ... (Ã–nceki dosyadan aynen al)
    pass

# Flask Route'larÄ± - GÃœNCELLENDÄ°
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/analyze', methods=['POST'])
def analyze():
    try:
        # CORS headers ekle
        response_headers = {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        }
        
        # OPTIONS isteÄŸi iÃ§in handling
        if request.method == 'OPTIONS':
            return '', 200, response_headers
        
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "JSON verisi bekleniyor"}), 400, response_headers
        
        company = data.get('company', '').strip()
        country = data.get('country', '').strip()
        
        if not company or not country:
            return jsonify({"error": "Åžirket ve Ã¼lke bilgisi gereklidir"}), 400, response_headers
        
        logging.info(f"Analiz baÅŸlatÄ±lÄ±yor: {company} - {country}")
        
        # YapÄ±landÄ±rma ve analiz
        config = Config()
        analyzer = AdvancedTradeAnalyzer(config)
        
        # Arama yap (timeout sÃ¼resi ile)
        try:
            results = analyzer.ai_enhanced_search(company, country)
        except Exception as search_error:
            logging.error(f"Arama hatasÄ±: {search_error}")
            return jsonify({"error": f"Arama iÅŸlemi sÄ±rasÄ±nda hata: {str(search_error)}"}), 500, response_headers
        
        # Excel raporu oluÅŸtur
        excel_filepath = create_advanced_excel_report(results, company, country)
        
        response_data = {
            "success": True,
            "company": company,
            "country": country,
            "total_results": len(results),
            "analysis": results,
            "excel_download_url": f"/download-excel?company={company}&country={country}" if excel_filepath else None
        }
        
        return jsonify(response_data), 200, response_headers
        
    except Exception as e:
        logging.error(f"Analiz hatasÄ±: {e}")
        return jsonify({"error": f"Sunucu hatasÄ±: {str(e)}"}), 500, {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        }

@app.route('/download-excel')
def download_excel():
    try:
        company = request.args.get('company', '')
        country = request.args.get('country', '')
        
        if not company or not country:
            return jsonify({"error": "Åžirket ve Ã¼lke bilgisi gereklidir"}), 400
        
        filename = f"{company.replace(' ', '_')}_{country}_analiz.xlsx"
        filepath = os.path.join('/tmp', filename)
        
        if os.path.exists(filepath):
            return send_file(
                filepath,
                as_attachment=True,
                download_name=filename,
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
        else:
            return jsonify({"error": "Excel dosyasÄ± bulunamadÄ±"}), 404
            
    except Exception as e:
        logging.error(f"Excel indirme hatasÄ±: {e}")
        return jsonify({"error": f"Ä°ndirme hatasÄ±: {str(e)}"}), 500

@app.route('/health')
def health():
    return jsonify({
        "status": "healthy", 
        "timestamp": datetime.now().isoformat(),
        "service": "Ticaret Analiz Sistemi"
    })

# Hata yÃ¶netimi
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Sayfa bulunamadÄ±"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Sunucu iÃ§ hatasÄ±"}), 500

@app.errorhandler(Exception)
def handle_exception(e):
    logging.error(f"Ä°ÅŸlenmeyen hata: {e}")
    return jsonify({"error": "Beklenmeyen sunucu hatasÄ±"}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
